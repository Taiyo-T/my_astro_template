---
import Layout from "../components/Layout.astro";
import IndexContent from "../components/content/IndexContent.astro";
import AboutContent from "../components/content/AboutContent.astro";
import ContactContent from "../components/content/ContactContent.astro";
import NewsContent from "../components/content/NewsContent.astro";
import { 
    isValidLocale, 
    getTranslations, 
    getPageTranslations,
    DEFAULT_LOCALE, 
    ALL_LOCALES 
} from "../i18n/config";

export async function getStaticPaths() {
    const pages = ["index", "about", "contact", "news"];
    const paths: any[] = [];
    
    // 日本語（デフォルト）のパス - slugなしで直接ルート
    for (const page of pages) {
        if (page === "index") {
            paths.push({ params: { slug: undefined } });
        } else {
            paths.push({ params: { slug: page } });
        }
    }
    
    // 他の言語のパス
    for (const locale of ALL_LOCALES) {
        if (locale !== DEFAULT_LOCALE) {
            for (const page of pages) {
                if (page === "index") {
                    paths.push({ params: { slug: locale } });
                } else {
                    paths.push({ params: { slug: `${locale}/${page}` } });
                }
            }
        }
    }
    
    return paths;
}

const { slug } = Astro.params;

// URLからlocaleとページ名を解析
let locale: string;
let pageName: string;

if (!slug) {
    // ルートパス "/" 
    locale = DEFAULT_LOCALE;
    pageName = "index";
} else if (isValidLocale(slug)) {
    // "/en" のような言語コードのみ
    locale = slug;
    pageName = "index";
} else if (slug.includes("/")) {
    // "/en/about" のような形式
    const [lang, page] = slug.split("/");
    if (isValidLocale(lang)) {
        locale = lang;
        pageName = page;
    } else {
        // 不正な形式の場合はリダイレクト
        return Astro.redirect("/");
    }
} else {
    // "/about" のような日本語ページ
    locale = DEFAULT_LOCALE;
    pageName = slug;
}

if (!isValidLocale(locale)) {
    return Astro.redirect("/");
}

const translations = getTranslations(locale);
const pageTranslations = await getPageTranslations(locale, pageName);
---

<Layout 
    locale={locale} 
    translations={translations}
    title={`${pageTranslations.title || translations.hello} | ${translations.hello}`}
    description={pageTranslations.description || translations.about}
    currentPath={pageName === "index" ? "" : pageName}
>
    {pageName === "index" && (
        <IndexContent 
            locale={locale} 
            translations={translations} 
            pageTranslations={pageTranslations} 
        />
    )}

    {pageName === "about" && (
        <AboutContent 
            locale={locale} 
            translations={translations} 
            pageTranslations={pageTranslations} 
        />
    )}

    {pageName === "contact" && (
        <ContactContent 
            locale={locale} 
            translations={translations} 
            pageTranslations={pageTranslations} 
        />
    )}

    {(pageName === "blog" || pageName === "news") && (
        <NewsContent 
            locale={locale} 
            translations={translations} 
            pageTranslations={pageTranslations} 
        />
    )}
</Layout>

<script>
    import { 
        getPreferredLanguage, 
        getSavedLanguage,
        DEFAULT_LOCALE,
        getLocalePath,
        isValidLocale
    } from "../i18n/config";

    // ページ読み込み時に適切な言語にリダイレクト
    function checkLanguageRedirect() {
        const currentPath = window.location.pathname;
        const savedLanguage = getSavedLanguage();
        
        // 保存された言語設定がある場合のみリダイレクト処理を実行
        if (savedLanguage) {
            // 現在のURLから言語コードとページパスを解析
            let currentLocale = DEFAULT_LOCALE;
            let pagePath = currentPath;
            
            // "/en/contact" のような形式をチェック
            const pathParts = currentPath.split('/').filter(part => part);
            if (pathParts.length > 0 && isValidLocale(pathParts[0])) {
                currentLocale = pathParts[0];
                pagePath = '/' + pathParts.slice(1).join('/');
                if (pagePath === '/') pagePath = '';
            } else if (currentPath !== '/') {
                // "/contact" のような日本語ページの場合
                pagePath = currentPath;
            }
            
            // 保存された言語と現在の言語が異なる場合はリダイレクト
            if (savedLanguage !== currentLocale) {
                const redirectPath = getLocalePath(savedLanguage, pagePath.replace(/^\//, ''));
                window.location.href = redirectPath;
            }
        } else {
            // 保存された言語がない場合、ルートページのみブラウザ言語検出
            if (currentPath === '/') {
                const preferredLanguage = getPreferredLanguage();
                
                if (preferredLanguage !== DEFAULT_LOCALE) {
                    const redirectPath = getLocalePath(preferredLanguage, '');
                    window.location.href = redirectPath;
                }
            }
        }
    }

    // DOM読み込み完了後に実行
    document.addEventListener('DOMContentLoaded', checkLanguageRedirect);
</script>